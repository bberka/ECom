@page "/panelsettings"
@using ECom.Shared.DTOs
@using Microsoft.AspNetCore.Localization
@inject SupportedCultures SupportedCultures

<RadzenRow Style="max-width: 450px">
<RadzenColumn >
  <RadzenCard  Variant="Variant.Filled">
    <RadzenFieldset Text="@Loc["panel_settings"]" >
        <RadzenColumn >
          <RadzenRow class="my-4" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenColumn>
              <RadzenText Class="mx-2 --rz-primary-dark" TextAlign="TextAlign.Start" TextStyle="TextStyle.H6" Text="@Loc["language"]" />
            </RadzenColumn>
            <RadzenColumn >
              <RadzenDropDown class="mx-2 rz-shadow-3" Style="width: 170px" TValue="string" Data="SupportedCultures.Dictionary" ValueProperty="Key" @bind-Value="_selectedCulture" Change="OnChangeCulture" TextProperty="Value" Name="CultureSelect"></RadzenDropDown>
            </RadzenColumn>
          </RadzenRow>
          <RadzenRow class="my-3">
            <RadzenColumn >
              <RadzenText Class="mx-2 --rz-primary-dark" TextAlign="TextAlign.Start" TextStyle="TextStyle.H6" Text="@Loc["theme"]" />
            </RadzenColumn>
            <RadzenColumn >
              <RadzenDropDown class="mx-2 rz-shadow-3 " Style="width: 170px" TValue="string" Data="_themes" ValueProperty="Key" @bind-Value="_selectedTheme" Change="OnChangeTheme" TextProperty="Value" Name="ThemeSelect"></RadzenDropDown>

            </RadzenColumn>
          </RadzenRow>
        </RadzenColumn>
    </RadzenFieldset>
  </RadzenCard>
</RadzenColumn>
</RadzenRow>


@code {

  private string? _selectedCulture;

  protected override void OnInitialized() {
    if (string.IsNullOrEmpty(_selectedCulture)) _selectedCulture = Thread.CurrentThread.CurrentCulture.Name;
  //selectedCulture = System.Threading.Thread.CurrentThread.CurrentCulture.Name; @bind-Value="_selectedCulture"
  }

  private void OnChangeCulture() {
  //var context = HttpContextAccessor.HttpContext;

    var redirectPath = new Uri(Nav.Uri)
      .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
    var culture = _selectedCulture;
    if (string.IsNullOrWhiteSpace(culture)) {
      culture = "en-US";
    }
    var isSupported = SupportedCultures.Dictionary.TryGetValue(culture, out _);
    if (!isSupported) {
      culture = "en-US";
    }
    JsCookieUtil.SetValue(CookieRequestCultureProvider.DefaultCookieName, CookieRequestCultureProvider.MakeCookieValue(new RequestCulture(culture)), TimeSpan.FromDays(365));
    Nav.NavigateTo(redirectPath, true);
  }

  private string? _selectedTheme;

  private static readonly Dictionary<string, string> _themes = new Dictionary<string, string>() {
    { "dark-base.css", "Standard Dark"},
    { "standard-base.css", "Standard Light"},
    { "material-base.css", "Material"},
    { "default-base.css", "Default"},
    { "humanistic-base.css", "Humanistic"},
    { "software-base.css", "Software"},

  };
  protected override async Task OnInitializedAsync() {
    _selectedTheme = await JsCookieUtil.GetValue("selected-theme");
    if (string.IsNullOrEmpty(_selectedTheme)) _selectedTheme = "dark-base.css"; //default
  }

  private void OnChangeTheme() {
    var redirectPath = new Uri(Nav.Uri)
      .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
    var theme = _selectedTheme;
    if (string.IsNullOrWhiteSpace(theme)) {
      theme = "dark-base.css";
    }
    var isSupported = _themes.TryGetValue(theme, out _);
    if (!isSupported) {
      theme = "dark-base.css";
    }
    JsCookieUtil.SetValue("selected-theme", theme, TimeSpan.FromDays(365));
    Nav.NavigateTo(redirectPath, true);
  }
}
