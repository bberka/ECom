@page "/announcements"
@using ECom.Domain.Entities
@using Microsoft.AspNetCore.Components
@using ECom.Domain.Abstract.Services.Admin
@inject IAdminAnnouncementService AnnouncementService
@inject IJSRuntime JsRuntime
@inherits SharedBasePage
<PageTitle>@Loc["announcements"]</PageTitle>



<RadzenCard Variant="Variant.Filled">
  <RadzenStack JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Start" Orientation="Orientation.Horizontal">
    <RadzenText TextStyle="TextStyle.H4">@Loc["announcements"]</RadzenText>
    <RadzenButton Text="@Loc["create"]" Click="ShowCreateDialog" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" Variant="Variant.Filled"></RadzenButton>
  </RadzenStack>
  <CustomHr></CustomHr>
  @*  <RadzenListBox id="sortable-list" TValue="Announcement" ValueProperty="Id" TextProperty="Message" Data="_announcements" AllowClear="false" AllowFiltering="false" AllowSelectAll="false" AllowVirtualization="false" FilterAsYouType="false" >

  </RadzenListBox>
  *@
  <RadzenRow Gap="2">
    <RadzenColumn SizeSM="12" SizeMD="12" SizeLG="8" SizeXL="6">
      <SortableList @ref="_sortableListRef" TValue="Announcement" Data="_announcements" ValueProperty="@nameof(Announcement.Id)" DisabledProperty="@nameof(Announcement.IsDisabled)" OrderProperty="@nameof(Announcement.Order)" TextProperty="@nameof(Announcement.Message)"></SortableList>
    </RadzenColumn>
  </RadzenRow>
  <RadzenStack class="mt-4" Orientation="Orientation.Horizontal">
    <RadzenButton Click="ApplyChanges" Icon="check" ButtonStyle="ButtonStyle.Success" Text="@Loc["apply_changes"]"></RadzenButton>
    <RadzenButton Click="ResetSortableList" Icon="settings_backup_restore" ButtonStyle="ButtonStyle.Danger" Text="@Loc["reset"]"></RadzenButton>

  </RadzenStack>

</RadzenCard>




@code {

  private List<Announcement> _orderedList { get; set; } = new();

  private SortableList<Announcement>? _sortableListRef;
  private void ResetSortableList() {
    _sortableListRef?.ResetListOrder();
  }

  private List<Announcement> _announcements = new();
  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();
    _announcements = AnnouncementService.ListAnnouncements();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    await base.OnAfterRenderAsync(firstRender);
  }

  private async Task ShowCreateDialog() {



  }

  private async Task ApplyChanges() {
    if (_sortableListRef is null) return;
    var list = await _sortableListRef.GetNewOrderedList();
    if (list is null) return;
    var result = AnnouncementService.UpdateAnnouncementsOrder(list);
    ShowResultNotification(result);
    if (result.Status) {
      _announcements = AnnouncementService.ListAnnouncements();
    }
  }

}
