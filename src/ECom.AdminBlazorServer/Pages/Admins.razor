@page "/admins"
@inject IAdminService AdminService
@using ECom.Shared.DTOs
@using AspNetCore.Authorization.Extender
@using ECom.Application.Attributes
@using ECom.Shared.Abstract.Services.Admin
@using ECom.Shared.Constants
@using ECom.Shared.DTOs
@using ECom.Shared.Entities
@using System.Globalization
@using ECom.Shared.Extensions

@inject IAdminRoleService RoleService
@inherits SharedBasePage
@attribute [AdminAuthorize(AdminPermission.ManageAdmins)]
<PageTitle>@Loc["admins"]</PageTitle>


<RadzenCard Variant="Variant.Filled">
  <RadzenStack JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Start" Orientation="Orientation.Horizontal">
    <RadzenText TextStyle="TextStyle.H4">@Loc["admins"]</RadzenText>
    <RadzenButton Text="@Loc["create"]" Click="ShowCreateDialog" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" Variant="Variant.Filled"></RadzenButton>
  </RadzenStack>
  <CustomHr></CustomHr>
  <RadzenDataGrid @ref="grid" EmptyText="@Loc["empty_table"]" Data="@admins" TItem="AdminDto" Context="admin" PageNumbersCount="10" AllowAlternatingRows="false" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" ColumnWidth="auto" LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
      <RadzenDataGridColumn MinWidth="280px" Width="300px" TItem="AdminDto" Property="Id" Title="@Loc["id"]" Frozen="true" />
      <RadzenDataGridColumn MinWidth="100px" Width="160px" TItem="AdminDto" Property="RegisterDate" Title="@(Loc["register"] + Loc["date"])" FormatString="{0:d}" />
      <RadzenDataGridColumn MinWidth="100px" TItem="AdminDto" Property="EmailAddress" Title="@Loc["email_address"]" />
      <RadzenDataGridColumn MinWidth="100px" TItem="AdminDto" Property="RoleId" Title="@(Loc["role"])" />
      <RadzenDataGridColumn MinWidth="100px" TItem="AdminDto" Property="deletedDate" Title="@(Loc["delete"] + " " + Loc["date"])" FormatString="{0:d}" />
      <RadzenDataGridColumn MinWidth="240px" TItem="AdminDto" Title="@Loc["actions"]">
        <Template Context="admin">
          <RadzenButton MouseEnter="@(args => ShowTooltipDanger(args, Loc["delete"]))" Visible="!admin.DeletedDate.HasValue" Icon="delete" Size="ButtonSize.Medium" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Danger" ButtonType="ButtonType.Button" Click="() => Show(SimpleActionType.delete, admin)">
          </RadzenButton>
          <RadzenButton MouseEnter="@(args => ShowTooltipSuccess(args, Loc["recover"]))" Visible="admin.DeletedDate.HasValue" Icon="done" Size="ButtonSize.Medium" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Success" ButtonType="ButtonType.Button" Click="() => Show(SimpleActionType.recover, admin)">
          </RadzenButton>
          <RadzenButton MouseEnter="@(args => ShowTooltipInfo(args, Loc["edit"]))" Visible="!admin.DeletedDate.HasValue" Icon="edit" Size="ButtonSize.Medium" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Info" ButtonType="ButtonType.Button" Click="() => ShowEditDialog(admin)">
          </RadzenButton>
          <RadzenButton MouseEnter="@(args => ShowTooltipWarn(args, Loc["reset_password"]))" Visible="!admin.DeletedDate.HasValue" Icon="lock_reset" Size="ButtonSize.Medium" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Warning" ButtonType="ButtonType.Button" Click="() => ShowResetPasswordConfirm(admin.Id)">
          </RadzenButton>
        </Template>

      </RadzenDataGridColumn>
    </Columns>
  </RadzenDataGrid>
</RadzenCard>

@code {

  [CascadingParameter]
  public Task<AuthenticationState> AuthTask { get; set; }


  private List<AdminDto> admins;
  private RadzenDataGrid<AdminDto> grid;
  private string _passwordClassName = "display: none; my-2";
  private AddAdminRequest addAdmin = new();
  private UpdateAdminAccountRequest updateAdmin = new();
  private Guid AuthenticatedAdminId;
  private List<Role> roles;

  protected override void OnInitialized() {
    base.OnInitialized();
    roles = RoleService.GetRoles();

  }

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
      var authState = await AuthTask;
      AuthenticatedAdminId = authState.GetAdminId();
      LoadAdmins();
      StateHasChanged();
    }
  }
  

  void LoadAdmins() {
    admins = AdminService.GetAdminList(AuthenticatedAdminId);
  }


  async Task ShowResetPasswordConfirm(Guid id) {
    var dialogResult = await ShowSimpleDialog(Loc["confirm_reset_password_other_admin"], Loc["confirmation"]);
    if (dialogResult != true) {
      return;
    }
    var admin = admins.FirstOrDefault(a => a.Id == id);
    if (admin == null) {
      return;
    }
    var result = AdminService.ResetPassword(AuthenticatedAdminId, id);
    if (result.Status) {
      await ShowSimpleResultDialog(Loc["success_password_reset"] + ", " + Loc["generated_new_password"].Format("password", result.Data), Loc["result"]);
      return;
    }
    await ShowResultDialog(result);
  }

  async Task Show(SimpleActionType type, AdminDto model) {
    var dialogResult = await ShowSimpleDialogLocalized(type, model.EmailAddress);
    if (dialogResult != true) {
      return;
    }
    var actionResult = PerformSimpleAction(type, model);
    if (actionResult.Status) {
      LoadAdmins();
    }
    //await ShowResultDialog(actionResult);
    ShowResultNotification(actionResult);
  }


  async Task ShowCreateDialog() {
    var result = await Dialog.OpenAsync(Loc["create"], ds =>
  @<RadzenTemplateForm TItem="AddAdminRequest" Data="@addAdmin" Submit="@(OnAddSubmit)">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <RadzenStack Orientation="Orientation.Vertical">

      <div class="mb-2">
        <RadzenFormField class="my-2 w-100" Component="EmailAddress" Text="@Loc["email_address"]" Variant="Variant.Filled">
          <RadzenTextBox class="w-100" Name="EmailAddress" @bind-Value="@addAdmin.EmailAddress" MaxLength="@ValidationSettings.MaxEmailLength" Placeholder="example.mail.com" />
        </RadzenFormField>
        <ValidationMessage For="() => addAdmin.EmailAddress"></ValidationMessage>
      </div>


      
      <div class="mb-2">
        <RadzenFormField class="my-2 w-100" Component="RoleId" Text="@Loc["role"]" Variant="Variant.Filled">
          <RadzenDropDown @bind-Value="@addAdmin.RoleId" Name="RoleId" TValue="string" Data="@roles" ValueProperty="@nameof(Role.Id)" TextProperty="@nameof(Role.Id)" Culture="CultureInfo.CurrentCulture" />
        </RadzenFormField>
        <ValidationMessage For="() => addAdmin.RoleId"></ValidationMessage>
      </div>


      <div class="mb-2">
        <RadzenFormField class="my-2 w-100" Component="Password" Text="@Loc["password"]" Variant="Variant.Filled">
          <RadzenPassword class="w-100" @bind-Value="addAdmin.Password" Name="Password"></RadzenPassword>
        </RadzenFormField>
        <ValidationMessage For="() => addAdmin.Password"></ValidationMessage>
      </div>


      <RadzenStack Class="my-2" Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenStack Orientation="Orientation.Horizontal">
          <RadzenButton Visible="true" Text=@Loc["create"] Click="() => { }" ButtonType="ButtonType.Submit" Style="width: 120px;" />
          <RadzenButton Visible="true" Text=@Loc["cancel"] Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
        </RadzenStack>
      </RadzenStack>
    </RadzenStack>
  </RadzenTemplateForm>
  , new DialogOptions {
        AutoFocusFirstElement = true,
        Height = "auto",
        Width = "330px"
      });

    async Task OnAddSubmit(AddAdminRequest model) {
      var auth = await AuthTask;
      var adminId = auth.GetAdminId();
      var actionResult = AdminService.AddAdmin(adminId, model);
      if (actionResult.Status) {
        LoadAdmins();
        addAdmin = new AddAdminRequest();
        Dialog.Close(true);
      }
      ShowResultNotification(actionResult);
    }
  }


  async Task ShowEditDialog(AdminDto model) {
    updateAdmin = new UpdateAdminAccountRequest {
          EmailAddress = model.EmailAddress,
          RoleId = model.RoleId,
          Password = "",
          Id = model.Id,
          UpdatePassword = updateAdmin.UpdatePassword
        };
    var result = await Dialog.OpenAsync(Loc["update"], ds =>
      @<RadzenTemplateForm TItem="UpdateAdminAccountRequest" Data="@updateAdmin" Submit="@(OnUpdateSubmit)">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <RadzenStack Orientation="Orientation.Vertical">
          <div class="mb-2">
            <RadzenFormField class="my-2 w-100" Component="EmailAddress" Text="@Loc["email_address"]" Variant="Variant.Filled">
              <RadzenTextBox class="w-100" Name="EmailAddress" @bind-Value="@updateAdmin.EmailAddress" MaxLength="@ValidationSettings.MaxEmailLength" Placeholder="example.mail.com"/>
            </RadzenFormField>
            <ValidationMessage For="() => updateAdmin.EmailAddress"></ValidationMessage>
          </div>
      
          <div class="mb-2">
            <RadzenFormField class="my-2 w-100" Component="RoleId" Text="@Loc["role"]" Variant="Variant.Filled">
              <RadzenDropDown @bind-Value="@addAdmin.RoleId" Name="RoleId" TValue="string" Data="@roles" ValueProperty="@nameof(Role.Id)" TextProperty="@nameof(Role.Id)" Culture="CultureInfo.CurrentCulture" />
            </RadzenFormField>
            <ValidationMessage For="() => addAdmin.RoleId"></ValidationMessage>
          </div>

          <ButtonSubmitUpdate OnCancel="() => ds.Close(false)"></ButtonSubmitUpdate>
        </RadzenStack>
      </RadzenTemplateForm>
  , new DialogOptions {
    AutoFocusFirstElement = true,
    Height = "auto",
    Width = "330px"
  });
    //<RadzenStack AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.Start" Orientation="Orientation.Horizontal">
    //  <RadzenCheckBox TValue="bool" ValueChanged="UpdatePasswordCheckBoxValueChange" Name="UpdatePassword" />
    //  <RadzenLabel Text="@(LocalizedResource["update"] + " "+ LocalizedResource["password"])" Component="UpdatePassword" Style="margin-left: 8px; vertical-align: middle;" />
    //</RadzenStack>
    //<div id="password-input" class="d-none">
    //  <FieldInputPassword @bind-Value="@updateAdmin.Password"  ApplyValidators="false"  ></FieldInputPassword>
    //</div>

    async Task OnUpdateSubmit(UpdateAdminAccountRequest updateAdminAccountRequest) {
      var actionResult = AdminService.UpdateAdmin(AuthenticatedAdminId, updateAdminAccountRequest);
      if (actionResult.Status) {
        LoadAdmins();
        updateAdmin = new UpdateAdminAccountRequest();
        Dialog.Close();
      }
      ShowResultNotification(actionResult);
    }
  }

  private async Task UpdatePasswordCheckBoxValueChange(bool val) {
    updateAdmin.UpdatePassword = val;
    var reference = await JsUtil.GetElementById("password-input");
    if (val) {
      await reference.AddClass("d-block");
      await reference.RemoveClass("d-none");
    }
    else {
      await reference.AddClass("d-none");
      await reference.RemoveClass("d-block");
    }
  }


  private CustomResult PerformSimpleAction(SimpleActionType type, AdminDto model) {
    var actionResult = type switch {
      SimpleActionType.delete => AdminService.DeleteAdmin(AuthenticatedAdminId, model.Id),
      SimpleActionType.recover => AdminService.RecoverAdmin(AuthenticatedAdminId, model.Id),
      _ => DomainResult.NotSupported()
    };
    return actionResult;
  }



}