@page "/roles"
@attribute [AdminAuthorize(AdminPermission.ManageAdmins)]
@inject TooltipService TooltipService
@inject IAdminRoleService AdminRoleService
@using AspNetCore.Authorization.Extender
@using ECom.Application.Services.BaseServices
@using ECom.Shared.Abstract.Services.Admin
@using ECom.Shared.Constants
@using ECom.Shared.DTOs
@using ECom.Shared.Entities
@inherits SharedBasePage

<PageTitle>@Loc["roles"]</PageTitle>
<RadzenCard Variant="Variant.Filled" Style="max-width: 850px">
  <RadzenStack JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Start" Orientation="Orientation.Horizontal">
    <RadzenText TextStyle="TextStyle.H4">@Loc["roles"]</RadzenText>
    <RadzenButton Text="@Loc["create"]" Click="ShowCreateDialog" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" Variant="Variant.Filled"></RadzenButton>
  </RadzenStack>
  <CustomHr></CustomHr>
  <RadzenDataGrid @ref="grid" Data="@roles" EmptyText="@Loc["empty_table"]" TItem="Role" Context="role" PageNumbersCount="10" AllowAlternatingRows="false" AllowFiltering="false" AllowColumnResize="false" AllowSorting="true" PageSize="10" ColumnWidth="auto">
    <Columns>
      <RadzenDataGridColumn MinWidth="100px" Width="160px" TItem="Role" Property="Id" Title="@(Loc["role"])" FormatString="{0:d}" />
      <RadzenDataGridColumn MinWidth="80px" Width="160px" TItem="Role" Property="PermissionRoles.Count" Title="@(Loc["permission_count"])" />
      <RadzenDataGridColumn MinWidth="80px" Width="160px" TItem="Role" Property="AdminCount" Title="@(Loc["admin_count"])" />
      <RadzenDataGridColumn MinWidth="100px" Width="300px" TItem="Role" Title="@Loc["actions"]">
        <Template Context="role">
          @if (role.Id != "Owner") {
            <RadzenButton Icon="edit" Size="ButtonSize.Medium" Text="@Loc["update"]" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Info" ButtonType="ButtonType.Button" Click="() => ShowEditDialog(role)">
            </RadzenButton>
            <RadzenButton MouseEnter="@(args => ShowTooltipDanger(args, Loc["delete"]))" Icon="delete" Size="ButtonSize.Medium" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Danger" ButtonType="ButtonType.Button" Click="() => DeleteRole(role)">
            </RadzenButton>
          }
          else {
            @*<RadzenText TextStyle="TextStyle.Body1" Text="@LocalizedResource["owner_permissions_can_not_be_updated"]"></RadzenText>*@
          }



        </Template>


      </RadzenDataGridColumn>
    </Columns>
  </RadzenDataGrid>
</RadzenCard>


@code {

  [CascadingParameter]
  public Task<AuthenticationState> AuthTask { get; set; }

  private static List<Role> roles = new();
  private static List<Permission> allPermissions = new();
  private RadzenDataGrid<Role> grid;
  private Role _editRole = new();

  protected override void OnInitialized() {
    if (roles.Count == 0)
      roles = AdminRoleService.GetRoles().ToList();
    if (allPermissions.Count == 0)
      allPermissions = AdminRoleService.GetPermissions();
  }
  private async Task SubmitUpdate(Role value) {
    var auth = await AuthTask;
    var adminId = auth.GetAdminId();
    var dbResult = AdminRoleService.UpdatePermissions(adminId, value.Id, value.Permissions.Select(x => x.Id).ToList());
    ShowResultNotification(dbResult);
    if (dbResult.Status) {
      roles = AdminRoleService.GetRoles().ToList();
      await grid.Reload();
      Dialog.Close();
    }
  }
  private async Task ShowEditDialog(Role value) {
    _editRole = value;
    //_editPermissions.Permissions = value.PermissionRoles.Select(y => y.Permission.Id).ToList();
    var result = await Dialog.OpenAsync(Loc["edit"] + " " + value.Id + " " + Loc["permission"], ds =>
  @<RadzenTemplateForm TItem="Role" Data="@_editRole" Submit="SubmitUpdate">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <RadzenStack Orientation="Orientation.Vertical">
      <RadzenListBox @bind-Value="@_editRole.Permissions" Data="@allPermissions" TextProperty="Id" ValueProperty="Id"
                     FilterOperator="StringFilterOperator.Contains" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Multiple="true" AllowClear="true" Placeholder="@Loc["select_permissions"]" Style="height: 300px; min-width: 300px; width: 100%;" />
      <ValidationMessage For="@(() => _editRole.Permissions)" />
      <RadzenStack Class="my-2" Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenStack Orientation="Orientation.Horizontal">
          <RadzenButton Visible="true" Text=@Loc["update"]  ButtonType="ButtonType.Submit" Style="width: 120px;" />
          <RadzenButton Visible="true" Text=@Loc["cancel"] Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
        </RadzenStack>
      </RadzenStack>
    </RadzenStack>
  </RadzenTemplateForm>
    , new DialogOptions {
      Style = "max-width: 500px"
    });
    
   
  }

  private AddRoleRequest _addRoleRequest = new AddRoleRequest();

  private async Task ShowCreateDialog() {
    var result = await Dialog.OpenAsync(Loc["create_role"], ds =>
  @<RadzenTemplateForm TItem="AddRoleRequest" Data="@_addRoleRequest" Submit="@(OnAddSubmit)">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <RadzenStack Orientation="Orientation.Vertical">
      <div class="mb-2">
        <RadzenFormField class="mw-100 w-100" Component="RoleName" Text="@Loc["role_name"]" Variant="Variant.Filled">
          <RadzenTextBox class="mw-100 w-100 " style="min-width: 300px" @bind-Value="@_addRoleRequest.RoleName" Name="RoleName"></RadzenTextBox>
        </RadzenFormField>
        <ValidationMessage For="@(() => _addRoleRequest.RoleName)" />
      </div>

      <div class="mb-2">

        <RadzenListBox @bind-Value="@_addRoleRequest.Permissions"
                       Data="@allPermissions"
                       TextProperty="Id"
                       ValueProperty="Id"
                       FilterOperator="StringFilterOperator.Contains"
                       FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                       AllowFiltering="true"
                       Multiple="true"
                       AllowClear="true"
                       Placeholder="@Loc["select_permissions"]"
                       Style="height: 300px; min-width: 300px; width: 100%;" />
        <ValidationMessage For="@(() => _addRoleRequest.Permissions)" />

      </div>

      <RadzenStack Class="my-2" Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenStack Orientation="Orientation.Horizontal">
          <RadzenButton Text=@Loc["create"] Click="() => { }" ButtonType="ButtonType.Submit" Style="width: 120px;" />
          <RadzenButton Text=@Loc["cancel"] Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
        </RadzenStack>
      </RadzenStack>
    </RadzenStack>
  </RadzenTemplateForm>
  , new DialogOptions {
    AutoFocusFirstElement = true,
    Height = "auto",
    Width = "400px"
  });
    void OnAddSubmit(AddRoleRequest model) {
      var actionResult = AdminRoleService.AddRole(model);
      ShowResultNotification(actionResult);
      if (!actionResult.Status) {
        return;
      }
      roles = AdminRoleService.GetRoles();
      _addRoleRequest = new AddRoleRequest();
      Dialog.Close(true);
    }
  }

  private async Task DeleteRole(Role value) {
    var dialogResult = await ShowSimpleDialogLocalized(SimpleActionType.delete, value.Id + " " + Loc["role"]);
    if (dialogResult != true) {
      return;
    }
    var actionResult = AdminRoleService.DeleteRole(value.Id);
    if (actionResult.Status) {
      roles = AdminRoleService.GetRoles();
    }
    ShowResultNotification(actionResult);
  }
}
