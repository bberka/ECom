@page "/roles"
@attribute [AdminAuthorize(AdminPermission.ManageAdmins)]
@inject TooltipService TooltipService
@inject DialogService DialogService
@inject IAdminRoleService AdminRoleService
@using AspNetCore.Authorization.Extender
@using ECom.Application.Services.BaseServices
@using ECom.Shared.Abstract.Services.Admin
@using ECom.Shared.Constants
@using ECom.Shared.DTOs
@using ECom.Shared.Entities
@inherits SharedBasePage

<PageTitle>@Loc["roles"]</PageTitle>
<RadzenCard Variant="Variant.Filled" Style="max-width: 800px">
  <RadzenStack JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Start" Orientation="Orientation.Horizontal">
    <RadzenText TextStyle="TextStyle.H4">@Loc["roles"]</RadzenText>
    <RadzenButton Text="@Loc["create"]" Click="ShowCreateDialog" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" Variant="Variant.Filled"></RadzenButton>
  </RadzenStack>
  <CustomHr></CustomHr>
  <RadzenDataGrid @ref="grid" Data="@roles" EmptyText="@Loc["empty_table"]" TItem="Role" Context="role" PageNumbersCount="10" AllowAlternatingRows="false" AllowFiltering="false" AllowColumnResize="false" AllowSorting="true" PageSize="10" ColumnWidth="auto">
    <Columns>
      <RadzenDataGridColumn MinWidth="100px" Width="160px" TItem="Role" Property="Id" Title="@(Loc["role"])" FormatString="{0:d}" />
      <RadzenDataGridColumn MinWidth="100px" Width="160px" TItem="Role" Property="PermissionRoles.Count" Title="@(Loc["permission_count"])" />
      <RadzenDataGridColumn MinWidth="100px" Width="300px" TItem="Role" Title="@Loc["actions"]">
        <Template Context="role">
          @if (role.Id != "Owner") {
            <RadzenButton Icon="edit" Size="ButtonSize.Medium" Text="@Loc["update"]" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Info" ButtonType="ButtonType.Button" Click="() => ShowEditDialog(role)">
            </RadzenButton>
            <RadzenButton MouseEnter="@(args => ShowTooltipDanger(args, Loc["delete"]))" Icon="delete" Size="ButtonSize.Medium" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Danger" ButtonType="ButtonType.Button" Click="() => DeleteRole(role)">
            </RadzenButton>
          }
          else {
            <RadzenText TextStyle="TextStyle.Body1" Text="@Loc["owner_permissions_can_not_be_updated"]"></RadzenText>
          }
       


        </Template>


      </RadzenDataGridColumn>
    </Columns>
  </RadzenDataGrid>
</RadzenCard>


@code {

  [CascadingParameter]
  public Task<AuthenticationState> AuthTask { get; set; }

  private static List<Role> roles = new();
  private static List<Permission> allPermissions = new();
  private RadzenDataGrid<Role> grid;
  private List<string> _editPermissions = new();

  protected override void OnInitialized() {
    if (roles.Count == 0)
      roles = AdminRoleService.GetRoles().ToList();
    if (allPermissions.Count == 0)
      allPermissions = AdminRoleService.GetPermissions();
  }

  //<RadzenDropDown MaxSelectedLabels="2" Style="min-width: 300px" @bind-Value="@_editPermissions" Multiple="true" TValue="List<Permission>" AllowVirtualization="true" AllowFiltering="true" Data=@(allPermissions) TextProperty="Id" ValueProperty="Id">
  //</RadzenDropDown>
  private async Task ShowEditDialog(Role value) {
    _editPermissions = value.PermissionRoles.Select(y => y.Permission.Id).ToList();
    var result = await DialogService.OpenAsync(Loc["edit"] + " " + Loc[value.Id.ToLower() + "_permissions"], ds =>
    @<RadzenStack Orientation="Orientation.Vertical">
      <RadzenListBox @bind-Value="@_editPermissions" Data="@allPermissions" TextProperty="Id" ValueProperty="Id"
                 FilterOperator="StringFilterOperator.Contains" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Multiple="true" AllowClear="true" Placeholder="@Loc["select_permissions"]" Style="height: 300px; min-width: 300px; width: 100%;" />


      <RadzenStack Class="my-2" Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenStack Orientation="Orientation.Horizontal">
          <RadzenButton Visible="true" Text=@Loc["update"] Click="() => ds.Close(true)" ButtonType="ButtonType.Submit" Style="width: 120px;" />
          <RadzenButton Visible="true" Text=@Loc["cancel"] Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
        </RadzenStack>
      </RadzenStack>
    </RadzenStack>
  , new DialogOptions {
        Style = "max-width: 500px"
      });
    if (result != true) {
      return;
    }
    var auth = await AuthTask;
    var adminId = auth.GetAdminId();
    var dbResult = AdminRoleService.UpdatePermissions(adminId, value.Id, _editPermissions);
    ShowResultNotification(dbResult);

    if (dbResult.Status) {
      roles = AdminRoleService.GetRoles().ToList();
      await grid.Reload();
    }
  }

  private AddRoleRequest _addRoleRequest = new AddRoleRequest();

  private async Task ShowCreateDialog() {
    var result = await Dialog.OpenAsync(Loc["create_role"], ds =>
      @<RadzenTemplateForm TItem="AddRoleRequest" Data="@_addRoleRequest" Submit="@(OnAddSubmit)">
        <RadzenStack Orientation="Orientation.Vertical">
          <div class="mb-2">
            <RadzenFormField class="mw-100 w-100" Component="RoleName" Text="@Loc["role_name"]" Variant="Variant.Filled">
              <RadzenTextBox class="mw-100 w-100 " style="min-width: 300px" @bind-Value="@_addRoleRequest.RoleName" Name="RoleName"></RadzenTextBox>
            </RadzenFormField>
            <RadzenRequiredValidator Component="RoleName" Text="@Loc["required"].Format("name", Loc["role_name"])"></RadzenRequiredValidator>
            <RadzenLengthValidator Component="RoleName" Min="2" Text="@Loc["too_short"].Format("name", Loc["role_name"]).Format("limit", 2)"></RadzenLengthValidator>
            <RadzenLengthValidator Component="RoleName" Max="24" Text="@Loc["too_long"].Format("name", Loc["role_name"]).Format("limit", 24)"></RadzenLengthValidator>
          </div>

          <div class="mb-2">
            
            <RadzenListBox
                  @bind-Value="@_addRoleRequest.Permissions" 
                             Data="@allPermissions" 
                             TextProperty="Id" 
                             ValueProperty="Id"
                             FilterOperator="StringFilterOperator.Contains" 
                             FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
                             AllowFiltering="true" 
                             Multiple="true" 
                             AllowClear="true" 
                             Placeholder="@Loc["select_permissions"]" 
                             Style="height: 300px; min-width: 300px; width: 100%;" />

          </div>

          <RadzenStack Class="my-2" Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Orientation="Orientation.Horizontal">
              <RadzenButton Text=@Loc["create"] Click="() => { }" ButtonType="ButtonType.Submit" Style="width: 120px;" />
              <RadzenButton Text=@Loc["cancel"] Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            </RadzenStack>
          </RadzenStack>
        </RadzenStack>
      </RadzenTemplateForm>
  , new DialogOptions {
    AutoFocusFirstElement = true,
    Height = "auto",
    Width = "400px"
  });
    void OnAddSubmit(AddRoleRequest model) {
      var actionResult = AdminRoleService.AddRole(model);
      ShowResultNotification(actionResult);
      if (actionResult.Status) {
        roles = AdminRoleService.GetRoles();
        _addRoleRequest = new AddRoleRequest();
        Dialog.Close(true);
      }
    }
  }

  private async Task DeleteRole(Role value) {
    var dialogResult = await ShowSimpleDialogLocalized(SimpleDialogType.Delete, value.Id + " " + Loc["role"]);
    if (dialogResult != true) {
      return;
    }
    var actionResult = AdminRoleService.DeleteRole(value.Id);
    if (actionResult.Status) {
      roles = AdminRoleService.GetRoles();
    }
    ShowResultNotification(actionResult);
  }
}
