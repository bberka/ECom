@page "/announcements"
@using Microsoft.AspNetCore.Components
@using ECom.Shared.DTOs
@using ECom.Shared.Entities
@using ECom.Shared.Abstract.Services.Admin
@using ECom.Shared.Extensions
@inject IAdminAnnouncementService AnnouncementService
@inject IJSRuntime JsRuntime
@inherits SharedBasePage
<PageTitle>@Loc["announcements"]</PageTitle>

<RadzenRow>
  <RadzenColumn SizeMD="6" SizeLG="6" SizeSM="12">
    <RadzenCard Variant="Variant.Filled">
      <RadzenStack JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Start" Orientation="Orientation.Horizontal">
        <RadzenText TextStyle="TextStyle.H4">@Loc["announcements"]</RadzenText>
        <RadzenButton Text="@Loc["create"]" Click="ShowCreateDialog" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" Variant="Variant.Filled"></RadzenButton>
      </RadzenStack>
      <CustomHr></CustomHr>
      <RadzenRow Gap="2">
        <RadzenColumn SizeSM="12" SizeMD="12" SizeLG="8" SizeXL="6">
          <SortableList @ref="_sortableListRef" InvertSwap="@true" InvertedSwapThreshold="15" TValue="Announcement" OrderedData="_announcements" ValueProperty="@nameof(Announcement.Id)" DisabledProperty="@nameof(Announcement.IsDisabled)" OrderProperty="@nameof(Announcement.Order)" TextProperty="@nameof(Announcement.Message)">
            <Template Context="item">
              <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start">
                <RadzenColumn Size="2" class="p-2">
                  <RadzenButton Style="max-width: 30px !important; width: 30px" MouseEnter="@(args => ShowTooltipDanger(args, Loc["delete"]))" Icon="delete" Size="ButtonSize.Medium" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Danger" ButtonType="ButtonType.Button" Click="(() => ConfirmDelete(item.Id,item.Message))">
                  </RadzenButton>
                </RadzenColumn>
                <RadzenColumn Size="10" class="pt-2">
                  <p class="text-break">
                    @item.Message
                  </p>
                </RadzenColumn>


              </RadzenStack>

            </Template>

          </SortableList>
        </RadzenColumn>
      </RadzenRow>
      @if (_announcements.Count > 1) {
        <RadzenStack class="mt-4" Orientation="Orientation.Horizontal">
          <RadzenButton Click="ApplyChanges" Icon="check" ButtonStyle="ButtonStyle.Success" Text="@Loc["apply_changes"]"></RadzenButton>
          @* <RadzenButton Click="ResetSortableList" Icon="settings_backup_restore" ButtonStyle="ButtonStyle.Danger" Text="@LocalizedResource["reset"]"></RadzenButton> *@

        </RadzenStack>
      }
      else if (_announcements.Count == 0) {

        <RadzenLabel>@Loc["no_announcements_found"]</RadzenLabel>
      }

    </RadzenCard>
  </RadzenColumn>
</RadzenRow>




@code {


  private SortableList<Announcement>? _sortableListRef;
  private void ResetSortableList() {
    _sortableListRef?.ResetListOrder();
  }

  private List<Announcement> _announcements = new();
  protected override async Task OnInitializedAsync() {
    //await base.OnInitializedAsync();
    _announcements = AnnouncementService.ListAnnouncements();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    //await base.OnAfterRenderAsync(firstRender);
  }
  private AnnouncementAddRequestDto _added = new();
  private Announcement _editedAnnouncement = new();
  private async Task ShowCreateDialog() {
    var result = await Dialog.OpenAsync(Loc["create_announcement"], ds =>
  @<RadzenTemplateForm TItem="AnnouncementAddRequestDto" Data="@_added" Submit="@(OnAddSubmit)">
    <RadzenStack Orientation="Orientation.Vertical">
      <div class="mb-2">
        <RadzenFormField class="mw-100 w-100" Component="AnnouncementsMessage" Text="@Loc["message"]" Variant="Variant.Filled">
          <RadzenTextArea class="mw-100 w-100 " style="min-width: 300px" @bind-Value="@_added.Message" Name="AnnouncementsMessage"></RadzenTextArea>
        </RadzenFormField>
        <RadzenRequiredValidator Component="AnnouncementsMessage" Text="@Loc["required"].Format("name", Loc["message"])"></RadzenRequiredValidator>
        <RadzenLengthValidator Component="AnnouncementsMessage" Min="3" Text="@Loc["too_short"].Format("name", Loc["message"]).Format("limit", 3)"></RadzenLengthValidator>
        <RadzenLengthValidator Component="AnnouncementsMessage" Max="128" Text="@Loc["too_long"].Format("name", Loc["message"]).Format("limit", 128)"></RadzenLengthValidator>
      </div>
      <div class="mb-2">
        <RadzenFormField class="mw-100 w-100" Component="AnnouncementsExpire" Text="@Loc["expire_date"]" Variant="Variant.Filled">
          <RadzenDatePicker class="mw-100 w-100" Min="DateTime.Now" Max="DateTime.Now.AddDays(90)" @bind-Value="@_added.ExpireDate" Name="AnnouncementsExpire"></RadzenDatePicker>
        </RadzenFormField>
        <RadzenRequiredValidator Component="AnnouncementsExpire" Text="@Loc["required"].Format("name", Loc["expire_date"])"></RadzenRequiredValidator>
      </div>
      <RadzenStack Class="my-2" Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenStack Orientation="Orientation.Horizontal">
          <RadzenButton Text=@Loc["create"] Click="() => { }" ButtonType="ButtonType.Submit" Style="width: 120px;" />
          <RadzenButton Text=@Loc["cancel"] Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
        </RadzenStack>
      </RadzenStack>
    </RadzenStack>
  </RadzenTemplateForm>
  , new DialogOptions {
    AutoFocusFirstElement = true,
    Height = "auto",
    Width = "330px"
  });
    async Task OnAddSubmit(AnnouncementAddRequestDto model) {
      var actionResult = AnnouncementService.AddAnnouncement(model);
      ShowResultNotification(actionResult);
      if (actionResult.Status) {
        _announcements = AnnouncementService.ListAnnouncements();
        _added = new AnnouncementAddRequestDto();
        Dialog.Close(true);
      }
    }
  }


  private async Task ApplyChanges() {
    if (_sortableListRef is null) return;
    var list = await _sortableListRef.GetNewOrderedList();
    if (list is null) return;
    var result = AnnouncementService.UpdateAnnouncementsOrder(list);
    ShowResultNotification(result);
    if (result.Status) {
      _announcements = AnnouncementService.ListAnnouncements();
    }
  }

  private async Task ConfirmDelete(Guid id, string message) {
    var dialogResult = await ShowSimpleDialogLocalized(SimpleActionType.delete, Loc["selected_announcement"]);
    if (dialogResult != true) {
      return;
    }
    var actionResult = AnnouncementService.DeleteAnnouncement(id);
    if (actionResult.Status) {
      _announcements = AnnouncementService.ListAnnouncements();
    }
    //await ShowResultDialog(actionResult);
    ShowResultNotification(actionResult);
  }

}
