@page "/management/admins"
@inject IAdminService AdminService
@inject IRoleService RoleService
@inject IJSRuntime JSRuntime
@inject DialogService DialogService
@inject TooltipService tooltipService
@using ECom.Shared.DTOs.AdminDto
@using ECom.Domain.Entities
@using AspNetCore.Authorization.Extender
@using ECom.Shared.Constants
@inherits ResultDialog
@attribute [RequirePermission(AdminPermission.ManageAdmins)]

<PageTitle>Admins</PageTitle>


<RadzenCard Variant="Variant.Filled">
  <RadzenStack JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Start" Orientation="Orientation.Horizontal">
    <RadzenText TextStyle="TextStyle.H4">Admins</RadzenText>
    <RadzenButton Text="@Loc["create"]" Click="ShowCreateDialog" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" Variant="Variant.Filled"></RadzenButton>
  </RadzenStack>
  <CustomHr></CustomHr>
  <RadzenDataGrid @ref="grid" EmptyText="@Loc["empty_table"]" Data="@admins" TItem="AdminDto" Context="admin" PageNumbersCount="10" AllowAlternatingRows="false" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" ColumnWidth="auto" LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
      <RadzenDataGridColumn MinWidth="60px" Width="80px" TItem="AdminDto" Property="Id" Title="@Loc["id"]" TextAlign="TextAlign.Center" Frozen="true" />
      <RadzenDataGridColumn MinWidth="100px" Width="160px" TItem="AdminDto" Property="RegisterDate" Title="@(Loc["register"] + Loc["date"])" FormatString="{0:d}" />
      <RadzenDataGridColumn MinWidth="100px" TItem="AdminDto" Property="EmailAddress" Title="@Loc["email_address"]" />
      @*<RadzenDataGridColumn MinWidth="100px" TItem="AdminDto" Property="TwoFactorType" Title="@Lang.Get("two_factor","type")" />*@
      @*<RadzenDataGridColumn MinWidth="100px" TItem="AdminDto" Property="RoleId" Title="@Lang.Get("role","id")" />*@
      <RadzenDataGridColumn MinWidth="100px" TItem="AdminDto" Property="RoleName" Title="@(Loc["role"] + Loc["name"])" />
      <RadzenDataGridColumn MinWidth="100px" TItem="AdminDto" Property="DeletedDate" Title="@(Loc["delete"] + Loc["date"])" FormatString="{0:d}" />
      <RadzenDataGridColumn MinWidth="100px" TItem="AdminDto" Title="@Loc["actions"]">
        <Template Context="admin">
          <RadzenButton MouseEnter="@(args => ShowTooltip(args, Loc["delete"], new TooltipOptions { Position = TooltipPosition.Bottom, CssClass = "text-danger" }))" Visible="!admin.DeletedDate.HasValue" Icon="delete" Size="ButtonSize.Medium" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Danger" ButtonType="ButtonType.Button" Click="() => Show(SimpleDialogType.Delete, admin)">
          </RadzenButton>
          <RadzenButton MouseEnter="@(args => ShowTooltip(args, Loc["recover"], new TooltipOptions { Position = TooltipPosition.Bottom, CssClass = "text-success" }))" Visible="admin.DeletedDate.HasValue" Icon="done" Size="ButtonSize.Medium" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Success" ButtonType="ButtonType.Button" Click="() => Show(SimpleDialogType.Recover, admin)">
          </RadzenButton>
          <RadzenButton MouseEnter="@(args => ShowTooltip(args, Loc["edit"], new TooltipOptions { Position = TooltipPosition.Bottom, CssClass = "text-info" }))" Visible="!admin.DeletedDate.HasValue" Icon="edit" Size="ButtonSize.Medium" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Info" ButtonType="ButtonType.Button" Click="() => ShowEditDialog(admin)">
          </RadzenButton>

        </Template>


      </RadzenDataGridColumn>
    </Columns>
  </RadzenDataGrid>
</RadzenCard>

@code {

  private List<AdminDto> admins;
  private List<Role> roles;
  private RadzenDataGrid<AdminDto> grid;
  private string _passwordClassName = "display: none; my-2";
  private AddAdminRequest addAdmin = new();
  private UpdateAdminAccountRequest updateAdmin = new();
  private Guid AuthenticatedAdminId ;
  protected override async Task OnInitializedAsync() {
    AuthenticatedAdminId = await AuthProvider.GetId();
    await LoadAdmins();
    roles = RoleService.GetRoles();
  }

  async Task LoadAdmins() {
    admins = AdminService.ListOtherAdmins(AuthenticatedAdminId);
  }

  //async Task RefreshGrid() {
  //  await grid.Reload();
  //}

  async Task Show(SimpleDialogType type, AdminDto model) {
    var dialogResult = await ShowSimpleDialog(type, model.EmailAddress);
    if (dialogResult != true) {
      return;
    }
    var actionResult = PerformSimpleAction(type, model);
    if (actionResult.Status) {
      await LoadAdmins();
    }
    //await ShowResultDialog(actionResult);
    ShowResultNotification(actionResult);
  }


  async Task ShowCreateDialog() {
    var result = await DialogService.OpenAsync(Loc["create"], ds =>
    @<RadzenTemplateForm TItem="AddAdminRequest" Data="@addAdmin"  Submit="@(OnAddSubmit)">

      <RadzenStack Orientation="Orientation.Vertical">
        <FieldInputEmailAddress @bind-Value="@addAdmin.EmailAddress"></FieldInputEmailAddress>
        <FieldDropdownAdminRole @bind-Value="@addAdmin.RoleId"></FieldDropdownAdminRole>
        <FieldInputPassword @bind-Value="@addAdmin.Password"></FieldInputPassword>

        <RadzenStack Class="my-2" Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
          <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenButton Visible="true" Text=@Loc["create"] Click="() => {  }" ButtonType="ButtonType.Submit" Style="width: 120px;" />
            <RadzenButton Visible="true" Text=@Loc["cancel"] Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
          </RadzenStack>
        </RadzenStack>
      </RadzenStack>
    </RadzenTemplateForm>
    , new DialogOptions {
          AutoFocusFirstElement = true,
          Height = "auto",
          Width = "330px"
        });

    async Task OnAddSubmit(AddAdminRequest model) {
      var actionResult = AdminService.AddAdmin(model);
      if (actionResult.Status) {
        await LoadAdmins();
        addAdmin = new AddAdminRequest();
      }
      ShowResultNotification(actionResult);
    }
  }


  async Task ShowEditDialog(AdminDto model) {
    updateAdmin = new UpdateAdminAccountRequest {
          EmailAddress = model.EmailAddress,
          RoleId = model.RoleId,
          Password = "",
          Id = model.Id,
          UpdatePassword = updateAdmin.UpdatePassword
        };
    var result = await DialogService.OpenAsync(Loc["edit"], ds =>
    @<RadzenTemplateForm TItem="UpdateAdminAccountRequest" Data="@updateAdmin" Submit="@(OnUpdateSubmit)">
      <RadzenStack Orientation="Orientation.Vertical">
        <FieldInputEmailAddress @bind-Value="@updateAdmin.EmailAddress"></FieldInputEmailAddress>
        <FieldDropdownAdminRole  @bind-Value="@updateAdmin.RoleId" ></FieldDropdownAdminRole>
        <RadzenStack AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.Start" Orientation="Orientation.Horizontal">
          <RadzenCheckBox TValue="bool" ValueChanged="UpdatePasswordCheckBoxValueChange" Name="UpdatePassword" />
          <RadzenLabel Text="@(Loc["update"] + Loc["password"])" Component="UpdatePassword" Style="margin-left: 8px; vertical-align: middle;" />
        </RadzenStack>
        <div id="password-input" class="d-none">
          <FieldInputPassword @bind-Value="@updateAdmin.Password"  ApplyValidators="false"  ></FieldInputPassword>
        </div>
        
        <ButtonSubmitUpdate OnCancel="(() => ds.Close(false))"></ButtonSubmitUpdate>
      </RadzenStack>
          </RadzenTemplateForm>
  , new DialogOptions {
        AutoFocusFirstElement = true,
        Height = "auto",
        Width = "330px"
      });


    async Task OnUpdateSubmit(UpdateAdminAccountRequest updateAdminAccountRequest) {
      var actionResult = AdminService.UpdateAdmin(AuthenticatedAdminId, updateAdminAccountRequest);
      if (actionResult.Status) {
        await LoadAdmins();
        updateAdmin = new UpdateAdminAccountRequest();
        DialogService.Close();
      }
      ShowResultNotification(actionResult);
    }
  }

  private async Task UpdatePasswordCheckBoxValueChange(bool val) {

    updateAdmin.UpdatePassword = val;
    var reference = await JsUtil.GetElementById("password-input");
    if (val) {
      await reference.AddClass("d-block");
      await reference.RemoveClass("d-none");

    } else {
      await reference.AddClass("d-none");
      await reference.RemoveClass("d-block");
    }
  }


  private CustomResult PerformSimpleAction(SimpleDialogType type, AdminDto model) {
    var actionResult = type switch {
      SimpleDialogType.Delete => AdminService.DeleteAdmin(AuthenticatedAdminId, model.Id),
      SimpleDialogType.Recover => AdminService.RecoverAdmin(AuthenticatedAdminId, model.Id),
      _ => DomainResult.NotSupported()
    };
    return actionResult;
  }

  void ShowTooltip(ElementReference elementReference, string text, TooltipOptions options = null) {
    //tooltipService.Open(elementReference, text, options);


  }

}