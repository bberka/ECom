@page "/management/roles"
@using AspNetCore.Authorization.Extender
@using ECom.Domain.Entities
@using ECom.Shared.Constants
@using ECom.Shared.DTOs.AdminDto
@attribute [RequirePermission(AdminPermission.ManageRolesAndPermissions)]
@inject TooltipService TooltipService
@inject DialogService DialogService
@inject IRoleService RoleService
@inherits SharedBasePage

<PageTitle>@Loc["roles"]</PageTitle>
<RadzenCard Variant="Variant.Filled" Style="max-width: 800px">
  <RadzenStack JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Start" Orientation="Orientation.Horizontal">
    <RadzenText TextStyle="TextStyle.H4">@Loc["roles"]</RadzenText>
  </RadzenStack>
  <CustomHr></CustomHr>
  <RadzenDataGrid @ref="grid" Data="@roles" EmptyText="@Loc["empty_table"]" TItem="Role" Context="role" PageNumbersCount="10" AllowAlternatingRows="false" AllowFiltering="false" AllowColumnResize="false" AllowSorting="true" PageSize="10" ColumnWidth="auto">
    <Columns>
      <RadzenDataGridColumn MinWidth="100px" Width="160px" TItem="Role" Property="Id" Title="@(Loc["role"])" FormatString="{0:d}" />
      <RadzenDataGridColumn MinWidth="100px" Width="160px" TItem="Role" Property="PermissionRoles.Count" Title="@(Loc["permission_count"])" />
      <RadzenDataGridColumn MinWidth="100px" Width="300px" TItem="Role" Title="@Loc["actions"]">
        <Template Context="role">
          @if (role.Id != RoleType.Owner.ToString()) {
            <RadzenButton Icon="edit" Size="ButtonSize.Medium" Text="@Loc["update"]" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Info" ButtonType="ButtonType.Button" Click="() => ShowEditDialog(role)">
            </RadzenButton>
          }
          else {
            <RadzenText TextStyle="TextStyle.Body1"  Text="@Loc["owner_permissions_can_not_be_updated"]"></RadzenText>
          }
          
        </Template>


      </RadzenDataGridColumn>
    </Columns>
  </RadzenDataGrid>
</RadzenCard>


@code {
  [CascadingParameter]
  public Task<AuthenticationState> AuthTask { get; set; }

  private static List<Role> roles = new List<Role>();
  private static List<Permission> allPermissions = new List<Permission>();
  private RadzenDataGrid<Role> grid;
  private List<string> _editPermissions = new();
  protected override void OnInitialized() {
    if (roles.Count == 0)
      roles = RoleService.GetRoles().ToList();
    if(allPermissions.Count == 0)
      allPermissions = RoleService.GetPermissions();
  }

  //<RadzenDropDown MaxSelectedLabels="2" Style="min-width: 300px" @bind-Value="@_editPermissions" Multiple="true" TValue="List<Permission>" AllowVirtualization="true" AllowFiltering="true" Data=@(allPermissions) TextProperty="Id" ValueProperty="Id">
  //</RadzenDropDown>
  private async Task ShowEditDialog(Role value) {
    
    _editPermissions = value.PermissionRoles.Select(y => y.Permission.Id).ToList();
    var result = await DialogService.OpenAsync(Loc["edit"] + " " +Loc[value.Id.ToLower() + "_permissions"], ds =>
      @<RadzenStack Orientation="Orientation.Vertical">
      <RadzenListBox @bind-Value=@_editPermissions Data=@allPermissions  TextProperty="Id" ValueProperty="Id"
                 FilterOperator="StringFilterOperator.Contains" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Multiple=true AllowClear=true Placeholder="@Loc["select_permissions"]" Style="width: 100%;  height: 300px;min-width: 300px" />

      
        <RadzenStack Class="my-2" Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
          <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenButton Visible="true" Text=@Loc["update"] Click="() => ds.Close(true)" ButtonType="ButtonType.Submit" Style="width: 120px;"/>
            <RadzenButton Visible="true" Text=@Loc["cancel"] Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light"/>
          </RadzenStack>
        </RadzenStack>
      </RadzenStack>
      
                 
    ,new DialogOptions() {
      Style = "max-width: 500px"
    });
    if (result != true) {
      return;
    }
    var auth = await AuthTask;
    var adminId = auth.GetAdminId();
    var dbResult = RoleService.UpdatePermissions(adminId, value.Id, _editPermissions);
    if (dbResult.Status) {
      roles = RoleService.GetRoles().ToList();
      await grid.Reload();
      await ShowResultDialog(dbResult);
    }
    else {
      ShowResultNotification(dbResult);
    }

  }

}