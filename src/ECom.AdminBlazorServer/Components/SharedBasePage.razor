
@inherits ComponentBase

@code {
  //const int defaultDuration = 4000;
  //protected void ShowResultNotificationWithData<T>(CustomResult<T> result, int duration = 3000) {
  //  var error = result.GetErrorAndName();
  //  var text = Loc[error.error].Format("name", error.name);

  //  var message = new NotificationMessage {
  //        Severity = SeverityFromResultLevel(result.Level),
  //        Summary = Loc[result.LevelText],
  //        Detail = text + Environment.NewLine + Environment.NewLine + result.Data,

  //        Duration = duration
  //      };
  //  NotificationService.Notify(message);
  //}
  protected void ShowResultNotification(CustomResult result, int duration = 3000) {
    var error = result.GetErrorAndName();
    var text = Loc[error.error].Format("name", error.name);

    var message = new NotificationMessage {
      Severity = SeverityFromResultLevel(result.Level),
      Summary = Loc[result.LevelText],
      Detail = text,
      Duration = duration
    };
    Notification.Notify(message);
  }

  protected void ShowNotification(CustomResultLevel severity, string text, int duration = 3000) {
    var message = new NotificationMessage {
      Severity = (NotificationSeverity)(int)severity + 1,
      Summary = Loc[severity.ToString().ToLower()],
      Detail = text,
      Duration = duration
    };
    Notification.Notify(message);
  }

  protected void ShowNotification(NotificationSeverity severity, string text, int duration = 3000) {
    var message = new NotificationMessage {
      Severity = severity,
      Summary = Loc[severity.ToString().ToLower()],
      Detail = text,
      Duration = duration
    };
    Notification.Notify(message);
  }

  protected async Task ShowResultDialog(CustomResult result) {
    var error = result.GetErrorAndName();
    var text = Loc[error.error].Format("name", error.name);
    _ = await Dialog.OpenAsync(Loc[result.LevelText], ds =>
      @<RadzenStack>
        <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P">@text</RadzenText>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
          <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenButton Text="Ok" Click="() => { ds.Close(true); }" Style="width: 120px;"/>
          </RadzenStack>
        </RadzenStack>
      </RadzenStack>
      , new DialogOptions {
        Height = "auto",
        Width = "350px"
      });
  }


  protected async Task<bool> ShowSimpleDialogLocalized(SimpleActionType type, string name, string title = "Confirm") {
    var text = Loc["simple_dialog_confirmation"].Format("action", Loc[type.ToString().ToLower()].ToString().ToLower()).Format("name", name);

    var result = await Dialog.OpenAsync(title, ds =>
      @<RadzenStack Gap="1.5rem">
        <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P">@text</RadzenText>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
          <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenButton Visible="true" Text="Ok" Click="() => { ds.Close(true); }" Style="width: 120px;"/>
            <RadzenButton Visible="true" Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light"/>
          </RadzenStack>
        </RadzenStack>
      </RadzenStack>
      , new DialogOptions {
        Height = "auto",
        Width = "320px"
      });
    return result == true;
  }

  protected async Task<bool> ShowSimpleDialog(string text, string title) {
    var result = await Dialog.OpenAsync(title, ds =>
      @<RadzenStack Gap="1.5rem">
        <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P">@text</RadzenText>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
          <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenButton Text="@Loc["confirm"]" Click="() => { ds.Close(true); }" Style="width: 120px;"/>
            <RadzenButton Text="@Loc["cancel"]" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light"/>
          </RadzenStack>
        </RadzenStack>
      </RadzenStack>
      , new DialogOptions {
        Height = "auto",
        Width = "320px"
      });
    return result == true;
  }

  protected async Task<bool> ShowSimpleResultDialog(string text, string title) {
    var result = await Dialog.OpenAsync(title, ds =>
      @<RadzenStack Gap="1.5rem">
        <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P">@text</RadzenText>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
          <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenButton Text="@Loc["ok"]" Click="() => { ds.Close(true); }" Style="width: 120px;"/>
          </RadzenStack>
        </RadzenStack>
      </RadzenStack>
      , new DialogOptions {
        Height = "auto",
        Width = "320px"
      });
    return result == true;
  }

  private NotificationSeverity SeverityFromResultLevel(CustomResultLevel level) {
    return level switch {
      CustomResultLevel.Info => NotificationSeverity.Success,
      CustomResultLevel.Warning => NotificationSeverity.Warning,
      CustomResultLevel.Error => NotificationSeverity.Error,
      CustomResultLevel.Critical => NotificationSeverity.Error,
      _ => NotificationSeverity.Error
      };
  } //background: var(--rz-primary-light)

  private static readonly TooltipOptions defaultTooltipOptions = new() {
    Position = TooltipPosition.Bottom
  };

  protected void ShowTooltip(ElementReference elementReference, string text) {
    Tooltip.Open(elementReference, text, defaultTooltipOptions);
  }

  protected void ShowTooltipDanger(ElementReference elementReference, string text) {
    var options = new TooltipOptions {
      Position = TooltipPosition.Bottom,
      Style = "background-color: var(--rz-danger); color: var(--rz-danger-contrast);"
    };
    Tooltip.Open(elementReference, text, options);
  }

  protected void ShowTooltipInfo(ElementReference elementReference, string text) {
    var options = new TooltipOptions {
      Position = TooltipPosition.Bottom,
      Style = "background-color: var(--rz-info); color: var(--rz-info-contrast);"
    };
    Tooltip.Open(elementReference, text, options);
  }

  protected void ShowTooltipWarn(ElementReference elementReference, string text) {
    var options = new TooltipOptions {
      Position = TooltipPosition.Bottom,
      Style = "background-color: var(--rz-warning); color: var(--rz-warn-contrast);"
    };
    Tooltip.Open(elementReference, text, options);
  }

  protected void ShowTooltipSuccess(ElementReference elementReference, string text) {
    var options = new TooltipOptions {
      Position = TooltipPosition.Bottom,
      Style = "background-color: var(--rz-success); color: var(--rz-success-contrast);"
    };
    Tooltip.Open(elementReference, text, options);
  }

  protected void ShowTooltipPrimary(ElementReference elementReference, string text) {
    var options = new TooltipOptions {
      Position = TooltipPosition.Bottom,
      Style = "background-color: var(--rz-primary); color: var(--rz-primary-contrast);"
    };
    Tooltip.Open(elementReference, text, options);
  }

  protected void ShowTooltipSecondary(ElementReference elementReference, string text) {
    var options = new TooltipOptions {
      Position = TooltipPosition.Bottom,
      Style = "background-color: var(--rz-secondary); color: var(--rz-secondary-contrast);"
    };
    Tooltip.Open(elementReference, text, options);
  }

}