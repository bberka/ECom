@inject DialogService DialogService
@inject NotificationService NotificationService
@inherits ComponentBase

@code {
  //const int defaultDuration = 4000;
  protected void ShowResultNotification(CustomResult result, int duration = 3000) {
    var text = Lang.GetError(result.ErrorCode);
    var message = new NotificationMessage {
      Severity = SeverityFromResultLevel(result.Level),
      Summary = Lang.Get(result.LevelText),
      Detail = text,
      Duration = duration
    };
    NotificationService.Notify(message);
  }

  protected void ShowNotification(NotificationSeverity severity, string text, int duration = 3000) {
    var message = new NotificationMessage {
      Severity = severity,
      Summary = Lang.Get(severity.ToString().ToLower()),
      Detail = text,
      Duration = duration
    };
    NotificationService.Notify(message);
  }

  protected async Task ShowResultDialog(CustomResult result) {
    var message = Lang.GetError(result.ErrorCode);
    _ = await DialogService.OpenAsync(Lang.Get(result.LevelText), ds =>
      @<RadzenStack >
        <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P">@message</RadzenText>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
          <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenButton Text="Ok" Click="() => { ds.Close(true); }" Style="width: 80px;"/>
          </RadzenStack>
        </RadzenStack>
      </RadzenStack>
      , new DialogOptions {
        Height = "auto",
        Width = "250px"
      });
  }


  protected async Task<bool> ShowSimpleDialog(SimpleDialogType type, string name, string title = "Confirm") {
    var message = Lang.Get("confirmation", new LocalizationParam("action", Lang.Get(type).ToLower()), new LocalizationParam("name", name));
    var showOkButton = type.ShowOkButton();
    var showCancelButton = type.ShowCancelButton();

    var result = await DialogService.OpenAsync(title, ds =>
      @<RadzenStack Gap="1.5rem">
        <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P">@message</RadzenText>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
          <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenButton Visible="showOkButton" Text="Ok" Click="() => { ds.Close(true); }" Style="width: 120px;"/>
            <RadzenButton Visible="showCancelButton" Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light"/>
          </RadzenStack>
        </RadzenStack>
      </RadzenStack>
      , new DialogOptions {
        Height = "auto",
        Width = "320px"
      });
    return result == true;
  }

  private NotificationSeverity SeverityFromResultLevel(CustomResultLevel level) {
    return level switch {
      CustomResultLevel.Info => NotificationSeverity.Success,
      CustomResultLevel.Warning => NotificationSeverity.Warning,
      CustomResultLevel.Error => NotificationSeverity.Error,
      CustomResultLevel.Critical => NotificationSeverity.Error,
      _ => NotificationSeverity.Error
      };
  }

}