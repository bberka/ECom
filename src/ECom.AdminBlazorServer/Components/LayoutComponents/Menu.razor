@using ECom.Shared.DTOs
@using Microsoft.AspNetCore.Localization
@inject SupportedCultures SupportedCultures

<RadzenMenu Style="height: 100%; width: 300px;" Multiple="false">
  <RadzenMenuItem Text="Account">
    <RadzenMenuItem Text="@Loc["account"]" Path="account" Icon="account_circle"></RadzenMenuItem>
    <RadzenMenuItem Text="@Loc["logout"]" Icon="logout" Path="logout"/>

    <RadzenMenuItem Text="@Loc["language"]" Icon="home">
      @foreach (var item in SupportedCultures.Dictionary) {
        <RadzenMenuItem Text="@item.Value" Click="() => OnCultureChange(item.Key)"></RadzenMenuItem>
      }
    </RadzenMenuItem>
    <RadzenMenuItem Text="@Loc["theme"]" Icon="payment">
      @foreach (var item in Themes) {
        <RadzenMenuItem Text="@item.Value" Click="() => OnThemeChange(item.Key)"></RadzenMenuItem>
      }
    </RadzenMenuItem>
  </RadzenMenuItem>

</RadzenMenu>

@code {
  private string? _selectedTheme;

  private static readonly Dictionary<string, string> Themes = new() {
    { "dark-base.css", "Standard Dark" },
    { "standard-base.css", "Standard Light" },
    { "material-base.css", "Material" },
    { "default-base.css", "Default" },
    { "humanistic-base.css", "Humanistic" },
    { "software-base.css", "Software" }
  };

  protected override async Task OnInitializedAsync() {
    _selectedTheme = await JsCookieUtil.GetValue("selected-theme");
    if (string.IsNullOrEmpty(_selectedTheme)) _selectedTheme = "dark-base.css"; //default
  }

  private void OnThemeChange(string theme) {
    var redirectPath = new Uri(Nav.Uri)
      .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
    if (string.IsNullOrWhiteSpace(theme)) {
      theme = "dark-base.css";
    }
    var isSupported = Themes.TryGetValue(theme, out _);
    if (!isSupported) {
      theme = "dark-base.css";
    }
    JsCookieUtil.SetValue("selected-theme", theme, TimeSpan.FromDays(365));
    Nav.NavigateTo(redirectPath, true);
  }

  private void OnThemeChange() {
    var redirectPath = new Uri(Nav.Uri)
      .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
    var theme = _selectedTheme;
    if (string.IsNullOrWhiteSpace(theme)) {
      theme = "dark-base.css";
    }
    var isSupported = Themes.TryGetValue(theme, out _);
    if (!isSupported) {
      theme = "dark-base.css";
    }
    JsCookieUtil.SetValue("selected-theme", theme, TimeSpan.FromDays(365));
    Nav.NavigateTo(redirectPath, true);
  }

  private string? _selectedCulture;

  protected override void OnInitialized() {
    if (string.IsNullOrEmpty(_selectedCulture)) _selectedCulture = Thread.CurrentThread.CurrentCulture.Name;
  //selectedCulture = System.Threading.Thread.CurrentThread.CurrentCulture.Name; @bind-Value="_selectedCulture"
  }

  private void OnCultureChange() {
    var redirectPath = new Uri(Nav.Uri)
      .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
    var culture = _selectedCulture;
    if (string.IsNullOrWhiteSpace(culture)) {
      culture = "en-US";
    }
    var isSupported = SupportedCultures.Dictionary.TryGetValue(culture, out _);
    if (!isSupported) {
      culture = "en-US";
    }
    JsCookieUtil.SetValue(CookieRequestCultureProvider.DefaultCookieName, CookieRequestCultureProvider.MakeCookieValue(new RequestCulture(culture)), TimeSpan.FromDays(365));
    Nav.NavigateTo(redirectPath, true);
  }

  private void OnCultureChange(string culture) {
  //var context = HttpContextAccessor.HttpContext;

    var redirectPath = new Uri(Nav.Uri)
      .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
    if (string.IsNullOrWhiteSpace(culture)) {
      culture = "en-US";
    }
    var isSupported = SupportedCultures.Dictionary.TryGetValue(culture, out _);
    if (!isSupported) {
      culture = "en-US";
    }
    JsCookieUtil.SetValue(CookieRequestCultureProvider.DefaultCookieName, CookieRequestCultureProvider.MakeCookieValue(new RequestCulture(culture)), TimeSpan.FromDays(365));
    Nav.NavigateTo(redirectPath, true);
  }

}