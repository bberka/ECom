// <auto-generated />
using System;
using ECom.Database;
using ECom.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECom.Infrastructure.Migrations
{
    [DbContext(typeof(EComDbContext))]
    [Migration("20231215194923_mg-1")]
    partial class mg1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECom.Core.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Provience")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Culture")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TwoFactorKey")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("TwoFactorType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Admins", "ECOperation");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5993a4f6-ff07-4635-97a4-a7c94c8b22ff"),
                            Culture = 0,
                            EmailAddress = "owner@mail.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "6759BF4BD24209B74B0B6374921F45D3317CFBA9B1F72374563F8E25B49108DC",
                            PhoneNumber = "5526667788",
                            RegisterDate = new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "owner",
                            TwoFactorType = (byte)0
                        });
                });

            modelBuilder.Entity("ECom.Core.Entities.AdminLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CFConnecting_IpAddress")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("ErrorCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("HttpStatusCode")
                        .HasColumnType("int");

                    b.Property<byte>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("OperationName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Params")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QueryString")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RemoteIpAddress")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("RequestUrl")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("XReal_IpAddress")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("AdminLogs", "ECLog");
                });

            modelBuilder.Entity("ECom.Core.Entities.AdminSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("SessionCreateType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("AdminSessions", "ECSession");
                });

            modelBuilder.Entity("ECom.Core.Entities.Announcement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Announcements", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.CargoOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FreeShippingMinLimit")
                        .HasColumnType("int");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("CargoOptions", "ECOption");
                });

            modelBuilder.Entity("ECom.Core.Entities.Cart", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Carts", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.Category", b =>
                {
                    b.Property<string>("NameKey")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MainCategoryNameKey")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ShowAtFooter")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowAtTopMenu")
                        .HasColumnType("bit");

                    b.HasKey("NameKey");

                    b.HasIndex("ImageId");

                    b.HasIndex("NameKey", "MainCategoryNameKey");

                    b.ToTable("Categories", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.CategoryDiscount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("DiscountPercent")
                        .HasColumnType("real");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryDiscounts", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Collections", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.CollectionProduct", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "CollectionId");

                    b.HasIndex("CollectionId");

                    b.ToTable("CollectionProducts", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.CompanyInformation", b =>
                {
                    b.Property<bool>("Key")
                        .HasColumnType("bit");

                    b.Property<string>("AdminPanelUrl")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FacebookLink")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid?>("FavIcoImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InstagramLink")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid?>("LogoImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("WebUiUrl")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("WhatsApp")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("YoutubeLink")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Key");

                    b.ToTable("CompanyInformation", "ECOption");

                    b.HasData(
                        new
                        {
                            Key = true,
                            AdminPanelUrl = "https://panel.shop.zdk.network",
                            CompanyAddress = "Worldwide",
                            CompanyName = "ZDK Network",
                            ContactEmail = "contact@zdk.network",
                            Description = "Company Description",
                            WebUiUrl = "https://shop.zdk.network"
                        });
                });

            modelBuilder.Entity("ECom.Core.Entities.DiscountCoupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Coupon")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("DiscountPercent")
                        .HasColumnType("real");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Coupon");

                    b.ToTable("DiscountCoupons", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.DiscountNotify", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("DiscountNotifies", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.EmailVerifyToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("UseDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Token");

                    b.HasIndex("UserId");

                    b.ToTable("EmailVerifyTokens", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.FavoriteProduct", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("FavoriteProducts", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("Culture")
                        .HasColumnType("int");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Images", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.ManagedLocalization", b =>
                {
                    b.Property<Guid>("Key")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Culture")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key", "Culture");

                    b.ToTable("ManagedLocalization", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.Option", b =>
                {
                    b.Property<bool>("Key")
                        .HasColumnType("bit");

                    b.Property<int>("DefaultCurrency")
                        .HasColumnType("int");

                    b.Property<int>("EmailVerificationTimeoutMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<byte>("PagingProductCount")
                        .HasColumnType("tinyint");

                    b.Property<int>("PasswordResetTimeoutMinutes")
                        .HasColumnType("int");

                    b.Property<byte>("ProductCommentImageLimit")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ProductImageLimit")
                        .HasColumnType("tinyint");

                    b.Property<bool>("RequireLowerCaseInPassword")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireNumberInPassword")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireSpecialCharacterInPassword")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireUpperCaseInPassword")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowCurrencyConversionRate")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowStock")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Key");

                    b.ToTable("Options", "ECOption");

                    b.HasData(
                        new
                        {
                            Key = true,
                            DefaultCurrency = 0,
                            EmailVerificationTimeoutMinutes = 30,
                            IsOpen = true,
                            PagingProductCount = (byte)20,
                            PasswordResetTimeoutMinutes = 30,
                            ProductCommentImageLimit = (byte)5,
                            ProductImageLimit = (byte)10,
                            RequireLowerCaseInPassword = false,
                            RequireNumberInPassword = false,
                            RequireSpecialCharacterInPassword = false,
                            RequireUpperCaseInPassword = false,
                            ShowCurrencyConversionRate = false,
                            ShowStock = false
                        });
                });

            modelBuilder.Entity("ECom.Core.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiscountCouponId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("DiscountedPrice")
                        .HasColumnType("float");

                    b.Property<byte>("OrderStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<double>("OriginalPrice")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiscountCouponId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.PasswordResetToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("UseDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Token");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResetTokens", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.PaymentOption", b =>
                {
                    b.Property<bool>("Key")
                        .HasColumnType("bit");

                    b.Property<float>("BankTransferTax")
                        .HasColumnType("real");

                    b.Property<float>("CashOnDeliveryTax")
                        .HasColumnType("real");

                    b.Property<string>("DollarBankTransferIban")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("DollarBankTransferSwift")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("EuroBankTransferIban")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("EuroBankTransferSwift")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("FreeShipmentMinLimit")
                        .HasColumnType("int");

                    b.Property<bool>("IncludeTaxToViewPrice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBankTransferEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCashOnDeliveryEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIyzicoEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPayTrEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShopierEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStripeEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("IyzicoApiKey")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("IyzicoSecretKey")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<float>("IyzicoTax")
                        .HasColumnType("real");

                    b.Property<string>("LiraBankTransferIban")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("LiraBankTransferSwift")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("PayTrInstallment")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("PayTrMerchantId")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("PayTrMerchantKey")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("PayTrMerchantSalt")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<float>("PayTrTax")
                        .HasColumnType("real");

                    b.Property<string>("ShopierPassword")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<float>("ShopierTax")
                        .HasColumnType("real");

                    b.Property<string>("ShopierUsername")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("StripeApiKey")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("StripeClientId")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<float>("StripeTax")
                        .HasColumnType("real");

                    b.Property<float>("Tax")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Key");

                    b.ToTable("PaymentOptions", "ECOption");
                });

            modelBuilder.Entity("ECom.Core.Entities.PermissionRole", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "Permission");

                    b.ToTable("PermissionRoles", "ECOperation");

                    b.HasData(
                        new
                        {
                            RoleId = "owner",
                            Permission = 0
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 1
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 2
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 3
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 4
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 5
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 6
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 7
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 8
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 9
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 10
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 11
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 12
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 13
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 14
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 15
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 16
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 17
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 18
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 19
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 20
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 21
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 22
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 23
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 24
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 25
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 26
                        },
                        new
                        {
                            RoleId = "owner",
                            Permission = 27
                        });
                });

            modelBuilder.Entity("ECom.Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountedPrice")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Stock")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductDetailId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("Products", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.ProductAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductAttributeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductAttributeTypeId", "ProductId", "Value")
                        .IsUnique();

                    b.ToTable("ProductDetailAttributes", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.ProductAttributeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("ProductAttributeTypes", "ECPrivate");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a624e2b7-46ee-4c95-9081-707ba9c81441"),
                            Name = "Color"
                        },
                        new
                        {
                            Id = new Guid("f3a3b240-0c44-40e0-88fb-0471ef44ae50"),
                            Name = "Size"
                        },
                        new
                        {
                            Id = new Guid("43eef28a-641a-4f34-8a34-25aa3524695e"),
                            Name = "Weight"
                        },
                        new
                        {
                            Id = new Guid("a9b00b37-ac6f-4b95-9e21-76db887b87b2"),
                            Name = "Storage"
                        },
                        new
                        {
                            Id = new Guid("2f0f9bda-80b8-4391-8caf-ca4bdfad1b0e"),
                            Name = "Ram"
                        },
                        new
                        {
                            Id = new Guid("bcb24b43-c497-4458-af78-6eb7fed4d197"),
                            Name = "Processor"
                        },
                        new
                        {
                            Id = new Guid("e3794732-f6e3-4478-9dcb-accedad23476"),
                            Name = "Screen Size"
                        },
                        new
                        {
                            Id = new Guid("50b069df-31a0-4ade-a553-17385b72c5db"),
                            Name = "Screen Resolution"
                        },
                        new
                        {
                            Id = new Guid("3bf9af7b-05c1-47df-bb90-476322511eeb"),
                            Name = "Battery"
                        },
                        new
                        {
                            Id = new Guid("b8b5b910-dfbe-4817-9f8d-26473ba51f9f"),
                            Name = "Operating System"
                        },
                        new
                        {
                            Id = new Guid("243a05ef-d2ff-4b56-8c45-a7372c0584c3"),
                            Name = "Brand"
                        },
                        new
                        {
                            Id = new Guid("834e45c4-c689-4273-9b47-0276f8553cdb"),
                            Name = "Model"
                        },
                        new
                        {
                            Id = new Guid("d397fcd8-9c74-4783-8dc7-5d8f0e10208c"),
                            Name = "Year"
                        },
                        new
                        {
                            Id = new Guid("13d18764-bdec-4c5b-900a-a478f295d93f"),
                            Name = "Material"
                        });
                });

            modelBuilder.Entity("ECom.Core.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "CategoryId");

                    b.ToTable("ProductCategories", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.ProductComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Star")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductComments", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.ProductDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DescriptionMarkdownLanguageKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NameLanguageKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShortDescriptionLanguageKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ProductDetails", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("ProductImages", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.ProductVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ProductVariant", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "ECOperation");

                    b.HasData(
                        new
                        {
                            Id = "owner"
                        });
                });

            modelBuilder.Entity("ECom.Core.Entities.SecurityLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CFConnecting_IpAddress")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("HttpStatusCode")
                        .HasColumnType("int");

                    b.Property<string>("QueryString")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RemoteIpAddress")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("RequestUrl")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("XReal_IpAddress")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("SecurityLogs", "ECLog");
                });

            modelBuilder.Entity("ECom.Core.Entities.ShowCase", b =>
                {
                    b.Property<byte>("ShowCaseType")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ShowCaseType");

                    b.HasIndex("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShowCases", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.Slider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("Culture")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Sliders", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.SmtpOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("SmtpHostType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UseSsl")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("SmtpHostType");

                    b.ToTable("SmtpOptions", "ECOption");
                });

            modelBuilder.Entity("ECom.Core.Entities.StockChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("StockChanges", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Suppliers", "ECPrivate");
                });

            modelBuilder.Entity("ECom.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CitizenShipNumber")
                        .HasColumnType("int");

                    b.Property<int>("Culture")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OAuthKey")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<byte>("OAuthType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TwoFactorKey")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<byte>("TwoFactorType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users", "ECPrivate");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5993a4f6-ff07-4635-97a4-a7c94c8b22ff"),
                            Culture = 0,
                            EmailAddress = "user@mail.com",
                            FirstName = "John",
                            IsEmailVerified = true,
                            LastName = "Doe",
                            OAuthType = (byte)0,
                            Password = "6759BF4BD24209B74B0B6374921F45D3317CFBA9B1F72374563F8E25B49108DC",
                            PhoneNumber = "5526667788",
                            RegisterDate = new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorType = (byte)0
                        });
                });

            modelBuilder.Entity("ECom.Core.Entities.UserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("SessionCreateType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions", "ECSession");
                });

            modelBuilder.Entity("ECom.Core.Entities.Address", b =>
                {
                    b.HasOne("ECom.Core.Entities.User", null)
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECom.Core.Entities.Admin", b =>
                {
                    b.HasOne("ECom.Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ECom.Core.Entities.AdminLog", b =>
                {
                    b.HasOne("ECom.Core.Entities.Admin", null)
                        .WithMany("AdminLogs")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("ECom.Core.Entities.AdminSession", b =>
                {
                    b.HasOne("ECom.Core.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("ECom.Core.Entities.CargoOption", b =>
                {
                    b.HasOne("ECom.Core.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("ECom.Core.Entities.Cart", b =>
                {
                    b.HasOne("ECom.Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECom.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECom.Core.Entities.Category", b =>
                {
                    b.HasOne("ECom.Core.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("ECom.Core.Entities.CategoryDiscount", b =>
                {
                    b.HasOne("ECom.Core.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ECom.Core.Entities.Collection", b =>
                {
                    b.HasOne("ECom.Core.Entities.User", "User")
                        .WithMany("Collections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECom.Core.Entities.CollectionProduct", b =>
                {
                    b.HasOne("ECom.Core.Entities.Collection", "Collection")
                        .WithMany()
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECom.Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECom.Core.Entities.DiscountNotify", b =>
                {
                    b.HasOne("ECom.Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECom.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECom.Core.Entities.EmailVerifyToken", b =>
                {
                    b.HasOne("ECom.Core.Entities.User", "User")
                        .WithMany("EmailVerifyTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECom.Core.Entities.FavoriteProduct", b =>
                {
                    b.HasOne("ECom.Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECom.Core.Entities.User", null)
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECom.Core.Entities.Order", b =>
                {
                    b.HasOne("ECom.Core.Entities.DiscountCoupon", "DiscountCoupon")
                        .WithMany()
                        .HasForeignKey("DiscountCouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECom.Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECom.Core.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscountCoupon");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECom.Core.Entities.PasswordResetToken", b =>
                {
                    b.HasOne("ECom.Core.Entities.User", "User")
                        .WithMany("PasswordResetTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECom.Core.Entities.PermissionRole", b =>
                {
                    b.HasOne("ECom.Core.Entities.Role", "Role")
                        .WithMany("PermissionRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ECom.Core.Entities.Product", b =>
                {
                    b.HasOne("ECom.Core.Entities.ProductDetail", "ProductDetail")
                        .WithMany()
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECom.Core.Entities.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDetail");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("ECom.Core.Entities.ProductAttribute", b =>
                {
                    b.HasOne("ECom.Core.Entities.ProductAttributeType", "ProductAttributeType")
                        .WithMany()
                        .HasForeignKey("ProductAttributeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECom.Core.Entities.Product", "Product")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductAttributeType");
                });

            modelBuilder.Entity("ECom.Core.Entities.ProductComment", b =>
                {
                    b.HasOne("ECom.Core.Entities.Product", "Product")
                        .WithMany("ProductComments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECom.Core.Entities.User", "User")
                        .WithMany("ProductComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECom.Core.Entities.ProductImage", b =>
                {
                    b.HasOne("ECom.Core.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECom.Core.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECom.Core.Entities.ShowCase", b =>
                {
                    b.HasOne("ECom.Core.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECom.Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Image");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECom.Core.Entities.Slider", b =>
                {
                    b.HasOne("ECom.Core.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("ECom.Core.Entities.StockChange", b =>
                {
                    b.HasOne("ECom.Core.Entities.Product", "Product")
                        .WithMany("StockChanges")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECom.Core.Entities.Supplier", "Supplier")
                        .WithMany("StockChanges")
                        .HasForeignKey("SupplierId");

                    b.HasOne("ECom.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECom.Core.Entities.UserSession", b =>
                {
                    b.HasOne("ECom.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECom.Core.Entities.Admin", b =>
                {
                    b.Navigation("AdminLogs");
                });

            modelBuilder.Entity("ECom.Core.Entities.Product", b =>
                {
                    b.Navigation("ProductAttributes");

                    b.Navigation("ProductComments");

                    b.Navigation("ProductImages");

                    b.Navigation("StockChanges");
                });

            modelBuilder.Entity("ECom.Core.Entities.Role", b =>
                {
                    b.Navigation("PermissionRoles");
                });

            modelBuilder.Entity("ECom.Core.Entities.Supplier", b =>
                {
                    b.Navigation("StockChanges");
                });

            modelBuilder.Entity("ECom.Core.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Collections");

                    b.Navigation("EmailVerifyTokens");

                    b.Navigation("FavoriteProducts");

                    b.Navigation("Orders");

                    b.Navigation("PasswordResetTokens");

                    b.Navigation("ProductComments");
                });
#pragma warning restore 612, 618
        }
    }
}
